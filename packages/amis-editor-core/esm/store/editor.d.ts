/// <reference types="react" />
import { Instance } from 'mobx-state-tree';
import { InsertEventContext, PluginEvent, RendererInfo, SubRendererInfo, ToolbarItem, PanelItem, MoveEventContext, ScaffoldForm, PopOverForm } from '../plugin';
import { EditorNodeType } from './node';
export interface SchemaHistory {
    versionId: number;
    schema: any;
}
export type SubEditorContext = {
    title: string;
    value: any;
    onChange: (value: any, diff: any) => void;
    slot?: any;
    data?: any;
    validate?: (value: any) => void | string | Promise<void | string>;
    canUndo?: boolean;
    canRedo?: boolean;
    typeMutable?: boolean;
    memberImmutable?: boolean | Array<string>;
    props?: any;
};
export type PatchItem = {
    op: 'update' | 'replace';
    target: string;
    value: any;
} | {
    op: 'delete';
    target: string;
} | {
    op: 'push';
    target: string;
    key: string;
    value: any;
} | {
    op: 'splice';
    target: string;
    key: string;
    args: Array<any>;
};
export interface ScaffoldFormContext extends ScaffoldForm {
    value: any;
    callback: (value: any) => void;
}
export interface PopOverFormContext extends PopOverForm {
    target: () => HTMLElement;
    value: any;
    callback: (value: any, diff: any) => void;
}
/**
 * 搜集的 name 信息
 */
export interface TargetName {
    type: string;
    name: string;
    editorId: string;
}
export declare const MainStore: import("mobx-state-tree").IModelType<{
    isMobile: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    isSubEditor: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    amisDocHost: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    root: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
        isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        id: import("mobx-state-tree").IType<string | undefined, string, string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
        region: import("mobx-state-tree").IType<string | undefined, string, string>;
        preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
        state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        w: import("mobx-state-tree").IType<number | undefined, number, number>;
        h: import("mobx-state-tree").IType<number | undefined, number, number>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
    }, {
        getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
    } & {
        readonly info: RendererInfo;
        setInfo(value: RendererInfo): void;
        readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
        setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
        readonly isVitualRenderer: boolean;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly moveable: boolean;
        readonly canMoveUp: boolean;
        readonly canMoveDown: boolean;
        readonly removable: boolean;
        readonly duplicatable: boolean;
        readonly replaceable: boolean;
        memberImmutable(region: string): boolean;
        readonly isRegion: boolean;
        readonly childRegions: any[];
        readonly uniqueChildren: any[];
        readonly sameIdChild: any;
        readonly singleRegion: boolean;
        isExists(id: string): boolean;
        getChildById(id: string): any;
        readonly parent: any;
        readonly ancestorField: any;
        readonly host: any;
        readonly firstChild: any;
        readonly index: any;
        readonly prevSibling: any;
        readonly nextSibling: any;
        readonly schema: any;
        readonly schemaParent: any;
        readonly isSecondFactor: boolean;
    } & {
        getClosestParentByType: (type: string) => void | ({
            parentId: string;
            parentRegion: string;
            isCommonConfig: boolean;
            id: string;
            type: string;
            label: string;
            regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
            path: string;
            schemaPath: string;
            region: string;
            preferTag: string;
            state: any;
            widthMutable: boolean;
            heightMutable: boolean;
            memberIndex: number;
            folded: boolean;
            patched: boolean;
            x: number;
            y: number;
            w: number;
            h: number;
            children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
            isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
            region: import("mobx-state-tree").IType<string | undefined, string, string>;
            preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
            state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
            folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            w: import("mobx-state-tree").IType<number | undefined, number, number>;
            h: import("mobx-state-tree").IType<number | undefined, number, number>;
            children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
        }, {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>);
        updateIsCommonConfig: (value: boolean) => void;
        addChild(props: {
            id: string;
            type: string;
            label: string;
            path: string;
            isCommonConfig?: boolean | undefined;
            info?: RendererInfo | undefined;
            region?: string | undefined;
            getData?: (() => any) | undefined;
            preferTag?: string | undefined;
            schemaPath?: string | undefined;
            regionInfo?: import("../plugin").RegionConfig | undefined;
            widthMutable?: boolean | undefined;
            memberIndex?: number | undefined;
        }): any;
        removeChild(child: any): void;
        toggleFold(e: import("react").MouseEvent<HTMLAnchorElement, MouseEvent>): void;
        patch(store: any, force?: boolean): void;
        updateSchema(value: any): void;
        updateSchemaStyle(value: any): void;
        setComponent(value: any): void;
        getComponent(): any;
        calculateHighlightBox(root?: any): void;
        resetHighlightBox(root: any): void;
        updateState(state: any, replace?: boolean): void;
        setWidthMutable(value: any): void;
        setHeightMutable(value: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    theme: import("mobx-state-tree").IType<string | undefined, string, string>;
    hoverId: import("mobx-state-tree").IType<string | undefined, string, string>;
    hoverRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
    activeId: import("mobx-state-tree").IType<string | undefined, string, string>;
    activeRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
    mouseMoveRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
    selections: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<string[], string[], string[]>, [undefined]>;
    contextId: import("mobx-state-tree").IType<string | undefined, string, string>;
    dragMode: import("mobx-state-tree").IType<string | undefined, string, string>;
    dragId: import("mobx-state-tree").IType<string | undefined, string, string>;
    dragType: import("mobx-state-tree").IType<string | undefined, string, string>;
    dragSchema: import("mobx-state-tree").IType<any, any, any>;
    dropId: import("mobx-state-tree").IType<string | undefined, string, string>;
    dropRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
    planDropId: import("mobx-state-tree").IType<string | undefined, string, string>;
    planDropRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
    insertId: import("mobx-state-tree").IType<string | undefined, string, string>;
    insertRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
    insertRenderers: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<SubRendererInfo[], SubRendererInfo[], SubRendererInfo[]>, [undefined]>;
    insertRenderersKeywords: import("mobx-state-tree").IType<string | undefined, string, string>;
    insertTag: import("mobx-state-tree").IType<string | undefined, string, string>;
    insertSelected: import("mobx-state-tree").IType<string | undefined, string, string>;
    insertMode: import("mobx-state-tree").IType<string | undefined, string, string>;
    insertOrigId: import("mobx-state-tree").IType<string | undefined, string, string>;
    insertBeforeId: import("mobx-state-tree").IType<string | undefined, string, string>;
    showInsertRenderer: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    schema: import("mobx-state-tree").IType<any, any, any>;
    versionId: import("mobx-state-tree").IType<number | undefined, number, number>;
    schemaHistory: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<SchemaHistory, SchemaHistory, SchemaHistory>>, [undefined]>;
    toolbars: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<ToolbarItem[], ToolbarItem[], ToolbarItem[]>, [undefined]>;
    panels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<PanelItem[], PanelItem[], PanelItem[]>, [undefined]>;
    showCustomRenderersPanel: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    renderersTabsKey: import("mobx-state-tree").IType<string | undefined, string, string>;
    subRenderers: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<SubRendererInfo[], SubRendererInfo[], SubRendererInfo[]>, [undefined]>;
    subRenderersKeywords: import("mobx-state-tree").IType<string | undefined, string, string>;
    subRenderersTag: import("mobx-state-tree").IType<string | undefined, string, string>;
    subRendererRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
    customRenderersKeywords: import("mobx-state-tree").IType<string | undefined, string, string>;
    customRenderersTag: import("mobx-state-tree").IType<string | undefined, string, string>;
    panelKey: import("mobx-state-tree").IType<string | undefined, string, string>;
    leftPanelKey: import("mobx-state-tree").IType<string | undefined, string, string>;
    leftPanelOpenStatus: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    jsonSchemaUri: import("mobx-state-tree").IType<string | undefined, string, string>;
    scaffoldForm: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<ScaffoldFormContext, ScaffoldFormContext, ScaffoldFormContext>>;
    scaffoldFormBuzy: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    scaffoldError: import("mobx-state-tree").IType<string | undefined, string, string>;
    popOverForm: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<PopOverFormContext, PopOverFormContext, PopOverFormContext>>;
    subEditorContext: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<SubEditorContext, SubEditorContext, SubEditorContext>>;
    superEditorData: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
    calculateStarted: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    targetNames: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<TargetName, TargetName, TargetName>>, [undefined]>;
    ctx: import("mobx-state-tree").IType<any, any, any>;
    i18nEnabled: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    appLocale: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    appCorpusData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    appLocaleState: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
}, {
    readonly filteredSchema: any;
    readonly filteredSchemaForPreview: any;
    isRootSchema(id: string): boolean;
    getRootId(): any;
    isHoved(id: string): boolean | "";
    isActive(id: string): boolean | "";
    isContextOn(id: string): boolean | "";
    readonly activeContainerId: string;
    isRegionHighlighted(id: string, region: string): boolean;
    isRegionHighlightHover(id: string, region: string): boolean;
    isRegionActive(id: string, region: string): boolean;
    isRegionDragEnter(id: string, region: string): boolean;
    readonly highlightNodes: ({
        parentId: string;
        parentRegion: string;
        isCommonConfig: boolean;
        id: string;
        type: string;
        label: string;
        regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
        path: string;
        schemaPath: string;
        region: string;
        preferTag: string;
        state: any;
        widthMutable: boolean;
        heightMutable: boolean;
        memberIndex: number;
        folded: boolean;
        patched: boolean;
        x: number;
        y: number;
        w: number;
        h: number;
        children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
    } & {
        readonly info: RendererInfo;
        setInfo(value: RendererInfo): void;
        readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
        setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
        readonly isVitualRenderer: boolean;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly moveable: boolean;
        readonly canMoveUp: boolean;
        readonly canMoveDown: boolean;
        readonly removable: boolean;
        readonly duplicatable: boolean;
        readonly replaceable: boolean;
        memberImmutable(region: string): boolean;
        readonly isRegion: boolean;
        readonly childRegions: any[];
        readonly uniqueChildren: any[];
        readonly sameIdChild: any;
        readonly singleRegion: boolean;
        isExists(id: string): boolean;
        getChildById(id: string): any;
        readonly parent: any;
        readonly ancestorField: any;
        readonly host: any;
        readonly firstChild: any;
        readonly index: any;
        readonly prevSibling: any;
        readonly nextSibling: any;
        readonly schema: any;
        readonly schemaParent: any;
        readonly isSecondFactor: boolean;
    } & {
        getClosestParentByType: (type: string) => void | ({
            parentId: string;
            parentRegion: string;
            isCommonConfig: boolean;
            id: string;
            type: string;
            label: string;
            regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
            path: string;
            schemaPath: string;
            region: string;
            preferTag: string;
            state: any;
            widthMutable: boolean;
            heightMutable: boolean;
            memberIndex: number;
            folded: boolean;
            patched: boolean;
            x: number;
            y: number;
            w: number;
            h: number;
            children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
            isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
            region: import("mobx-state-tree").IType<string | undefined, string, string>;
            preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
            state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
            folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            w: import("mobx-state-tree").IType<number | undefined, number, number>;
            h: import("mobx-state-tree").IType<number | undefined, number, number>;
            children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
        }, {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>);
        updateIsCommonConfig: (value: boolean) => void;
        addChild(props: {
            id: string;
            type: string;
            label: string;
            path: string;
            isCommonConfig?: boolean | undefined;
            info?: RendererInfo | undefined;
            region?: string | undefined;
            getData?: (() => any) | undefined;
            preferTag?: string | undefined;
            schemaPath?: string | undefined;
            regionInfo?: import("../plugin").RegionConfig | undefined;
            widthMutable?: boolean | undefined;
            memberIndex?: number | undefined;
        }): any;
        removeChild(child: any): void;
        toggleFold(e: import("react").MouseEvent<HTMLAnchorElement, MouseEvent>): void;
        patch(store: any, force?: boolean): void;
        updateSchema(value: any): void;
        updateSchemaStyle(value: any): void;
        setComponent(value: any): void;
        getComponent(): any;
        calculateHighlightBox(root?: any): void;
        resetHighlightBox(root: any): void;
        updateState(state: any, replace?: boolean): void;
        setWidthMutable(value: any): void;
        setHeightMutable(value: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
        isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        id: import("mobx-state-tree").IType<string | undefined, string, string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
        region: import("mobx-state-tree").IType<string | undefined, string, string>;
        preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
        state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        w: import("mobx-state-tree").IType<number | undefined, number, number>;
        h: import("mobx-state-tree").IType<number | undefined, number, number>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
    }, {
        getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
    } & {
        readonly info: RendererInfo;
        setInfo(value: RendererInfo): void;
        readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
        setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
        readonly isVitualRenderer: boolean;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly moveable: boolean;
        readonly canMoveUp: boolean;
        readonly canMoveDown: boolean;
        readonly removable: boolean;
        readonly duplicatable: boolean;
        readonly replaceable: boolean;
        memberImmutable(region: string): boolean;
        readonly isRegion: boolean;
        readonly childRegions: any[];
        readonly uniqueChildren: any[];
        readonly sameIdChild: any;
        readonly singleRegion: boolean;
        isExists(id: string): boolean;
        getChildById(id: string): any;
        readonly parent: any;
        readonly ancestorField: any;
        readonly host: any;
        readonly firstChild: any;
        readonly index: any;
        readonly prevSibling: any;
        readonly nextSibling: any;
        readonly schema: any;
        readonly schemaParent: any;
        readonly isSecondFactor: boolean;
    } & {
        getClosestParentByType: (type: string) => void | ({
            parentId: string;
            parentRegion: string;
            isCommonConfig: boolean;
            id: string;
            type: string;
            label: string;
            regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
            path: string;
            schemaPath: string;
            region: string;
            preferTag: string;
            state: any;
            widthMutable: boolean;
            heightMutable: boolean;
            memberIndex: number;
            folded: boolean;
            patched: boolean;
            x: number;
            y: number;
            w: number;
            h: number;
            children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
            isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
            region: import("mobx-state-tree").IType<string | undefined, string, string>;
            preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
            state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
            folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            w: import("mobx-state-tree").IType<number | undefined, number, number>;
            h: import("mobx-state-tree").IType<number | undefined, number, number>;
            children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
        }, {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>);
        updateIsCommonConfig: (value: boolean) => void;
        addChild(props: {
            id: string;
            type: string;
            label: string;
            path: string;
            isCommonConfig?: boolean | undefined;
            info?: RendererInfo | undefined;
            region?: string | undefined;
            getData?: (() => any) | undefined;
            preferTag?: string | undefined;
            schemaPath?: string | undefined;
            regionInfo?: import("../plugin").RegionConfig | undefined;
            widthMutable?: boolean | undefined;
            memberIndex?: number | undefined;
        }): any;
        removeChild(child: any): void;
        toggleFold(e: import("react").MouseEvent<HTMLAnchorElement, MouseEvent>): void;
        patch(store: any, force?: boolean): void;
        updateSchema(value: any): void;
        updateSchemaStyle(value: any): void;
        setComponent(value: any): void;
        getComponent(): any;
        calculateHighlightBox(root?: any): void;
        resetHighlightBox(root: any): void;
        updateState(state: any, replace?: boolean): void;
        setWidthMutable(value: any): void;
        setHeightMutable(value: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    getNodeById(id: string, regionOrType?: string): EditorNodeType | undefined;
    readonly activeNodeInfo: RendererInfo | null | undefined;
    getSchema(id?: string, idKey?: string): any;
    getSchemaParentById(id: string, skipArray?: boolean): any;
    getSchemaPath(id: string): string;
    getSimpleSchema(curSchema: any): any;
    getPanelKey(): string;
    getLeftPanelKey(): string;
    readonly leftPanels: PanelItem[];
    readonly rightPanels: PanelItem[];
    readonly contextMenuPanel: PanelItem | undefined;
    getPanels(): Array<PanelItem>;
    getLeftPanels(): Array<PanelItem>;
    readonly sortedToolbars: ToolbarItem[];
    readonly sortedSecondaryToolbars: ToolbarItem[];
    readonly sortedSpecialToolbars: ToolbarItem[];
    readonly value: any;
    getValueOf(id: string): any;
    readonly valueWithoutHiddenProps: any;
    readonly outline: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
    readonly bcn: ({
        parentId: string;
        parentRegion: string;
        isCommonConfig: boolean;
        id: string;
        type: string;
        label: string;
        regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
        path: string;
        schemaPath: string;
        region: string;
        preferTag: string;
        state: any;
        widthMutable: boolean;
        heightMutable: boolean;
        memberIndex: number;
        folded: boolean;
        patched: boolean;
        x: number;
        y: number;
        w: number;
        h: number;
        children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
    } & {
        readonly info: RendererInfo;
        setInfo(value: RendererInfo): void;
        readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
        setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
        readonly isVitualRenderer: boolean;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly moveable: boolean;
        readonly canMoveUp: boolean;
        readonly canMoveDown: boolean;
        readonly removable: boolean;
        readonly duplicatable: boolean;
        readonly replaceable: boolean;
        memberImmutable(region: string): boolean;
        readonly isRegion: boolean;
        readonly childRegions: any[];
        readonly uniqueChildren: any[];
        readonly sameIdChild: any;
        readonly singleRegion: boolean;
        isExists(id: string): boolean;
        getChildById(id: string): any;
        readonly parent: any;
        readonly ancestorField: any;
        readonly host: any;
        readonly firstChild: any;
        readonly index: any;
        readonly prevSibling: any;
        readonly nextSibling: any;
        readonly schema: any;
        readonly schemaParent: any;
        readonly isSecondFactor: boolean;
    } & {
        getClosestParentByType: (type: string) => void | ({
            parentId: string;
            parentRegion: string;
            isCommonConfig: boolean;
            id: string;
            type: string;
            label: string;
            regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
            path: string;
            schemaPath: string;
            region: string;
            preferTag: string;
            state: any;
            widthMutable: boolean;
            heightMutable: boolean;
            memberIndex: number;
            folded: boolean;
            patched: boolean;
            x: number;
            y: number;
            w: number;
            h: number;
            children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
            isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
            region: import("mobx-state-tree").IType<string | undefined, string, string>;
            preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
            state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
            folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            w: import("mobx-state-tree").IType<number | undefined, number, number>;
            h: import("mobx-state-tree").IType<number | undefined, number, number>;
            children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
        }, {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>);
        updateIsCommonConfig: (value: boolean) => void;
        addChild(props: {
            id: string;
            type: string;
            label: string;
            path: string;
            isCommonConfig?: boolean | undefined;
            info?: RendererInfo | undefined;
            region?: string | undefined;
            getData?: (() => any) | undefined;
            preferTag?: string | undefined;
            schemaPath?: string | undefined;
            regionInfo?: import("../plugin").RegionConfig | undefined;
            widthMutable?: boolean | undefined;
            memberIndex?: number | undefined;
        }): any;
        removeChild(child: any): void;
        toggleFold(e: import("react").MouseEvent<HTMLAnchorElement, MouseEvent>): void;
        patch(store: any, force?: boolean): void;
        updateSchema(value: any): void;
        updateSchemaStyle(value: any): void;
        setComponent(value: any): void;
        getComponent(): any;
        calculateHighlightBox(root?: any): void;
        resetHighlightBox(root: any): void;
        updateState(state: any, replace?: boolean): void;
        setWidthMutable(value: any): void;
        setHeightMutable(value: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
        isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        id: import("mobx-state-tree").IType<string | undefined, string, string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
        region: import("mobx-state-tree").IType<string | undefined, string, string>;
        preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
        state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        w: import("mobx-state-tree").IType<number | undefined, number, number>;
        h: import("mobx-state-tree").IType<number | undefined, number, number>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
    }, {
        getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
    } & {
        readonly info: RendererInfo;
        setInfo(value: RendererInfo): void;
        readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
        setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
        readonly isVitualRenderer: boolean;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly moveable: boolean;
        readonly canMoveUp: boolean;
        readonly canMoveDown: boolean;
        readonly removable: boolean;
        readonly duplicatable: boolean;
        readonly replaceable: boolean;
        memberImmutable(region: string): boolean;
        readonly isRegion: boolean;
        readonly childRegions: any[];
        readonly uniqueChildren: any[];
        readonly sameIdChild: any;
        readonly singleRegion: boolean;
        isExists(id: string): boolean;
        getChildById(id: string): any;
        readonly parent: any;
        readonly ancestorField: any;
        readonly host: any;
        readonly firstChild: any;
        readonly index: any;
        readonly prevSibling: any;
        readonly nextSibling: any;
        readonly schema: any;
        readonly schemaParent: any;
        readonly isSecondFactor: boolean;
    } & {
        getClosestParentByType: (type: string) => void | ({
            parentId: string;
            parentRegion: string;
            isCommonConfig: boolean;
            id: string;
            type: string;
            label: string;
            regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
            path: string;
            schemaPath: string;
            region: string;
            preferTag: string;
            state: any;
            widthMutable: boolean;
            heightMutable: boolean;
            memberIndex: number;
            folded: boolean;
            patched: boolean;
            x: number;
            y: number;
            w: number;
            h: number;
            children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
            isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
            region: import("mobx-state-tree").IType<string | undefined, string, string>;
            preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
            state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
            folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            w: import("mobx-state-tree").IType<number | undefined, number, number>;
            h: import("mobx-state-tree").IType<number | undefined, number, number>;
            children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
        }, {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>);
        updateIsCommonConfig: (value: boolean) => void;
        addChild(props: {
            id: string;
            type: string;
            label: string;
            path: string;
            isCommonConfig?: boolean | undefined;
            info?: RendererInfo | undefined;
            region?: string | undefined;
            getData?: (() => any) | undefined;
            preferTag?: string | undefined;
            schemaPath?: string | undefined;
            regionInfo?: import("../plugin").RegionConfig | undefined;
            widthMutable?: boolean | undefined;
            memberIndex?: number | undefined;
        }): any;
        removeChild(child: any): void;
        toggleFold(e: import("react").MouseEvent<HTMLAnchorElement, MouseEvent>): void;
        patch(store: any, force?: boolean): void;
        updateSchema(value: any): void;
        updateSchemaStyle(value: any): void;
        setComponent(value: any): void;
        getComponent(): any;
        calculateHighlightBox(root?: any): void;
        resetHighlightBox(root: any): void;
        updateState(state: any, replace?: boolean): void;
        setWidthMutable(value: any): void;
        setHeightMutable(value: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly activePath: ({
        parentId: string;
        parentRegion: string;
        isCommonConfig: boolean;
        id: string;
        type: string;
        label: string;
        regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
        path: string;
        schemaPath: string;
        region: string;
        preferTag: string;
        state: any;
        widthMutable: boolean;
        heightMutable: boolean;
        memberIndex: number;
        folded: boolean;
        patched: boolean;
        x: number;
        y: number;
        w: number;
        h: number;
        children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
    } & {
        readonly info: RendererInfo;
        setInfo(value: RendererInfo): void;
        readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
        setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
        readonly isVitualRenderer: boolean;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly moveable: boolean;
        readonly canMoveUp: boolean;
        readonly canMoveDown: boolean;
        readonly removable: boolean;
        readonly duplicatable: boolean;
        readonly replaceable: boolean;
        memberImmutable(region: string): boolean;
        readonly isRegion: boolean;
        readonly childRegions: any[];
        readonly uniqueChildren: any[];
        readonly sameIdChild: any;
        readonly singleRegion: boolean;
        isExists(id: string): boolean;
        getChildById(id: string): any;
        readonly parent: any;
        readonly ancestorField: any;
        readonly host: any;
        readonly firstChild: any;
        readonly index: any;
        readonly prevSibling: any;
        readonly nextSibling: any;
        readonly schema: any;
        readonly schemaParent: any;
        readonly isSecondFactor: boolean;
    } & {
        getClosestParentByType: (type: string) => void | ({
            parentId: string;
            parentRegion: string;
            isCommonConfig: boolean;
            id: string;
            type: string;
            label: string;
            regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
            path: string;
            schemaPath: string;
            region: string;
            preferTag: string;
            state: any;
            widthMutable: boolean;
            heightMutable: boolean;
            memberIndex: number;
            folded: boolean;
            patched: boolean;
            x: number;
            y: number;
            w: number;
            h: number;
            children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
            isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
            region: import("mobx-state-tree").IType<string | undefined, string, string>;
            preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
            state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
            folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            w: import("mobx-state-tree").IType<number | undefined, number, number>;
            h: import("mobx-state-tree").IType<number | undefined, number, number>;
            children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
        }, {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>);
        updateIsCommonConfig: (value: boolean) => void;
        addChild(props: {
            id: string;
            type: string;
            label: string;
            path: string;
            isCommonConfig?: boolean | undefined;
            info?: RendererInfo | undefined;
            region?: string | undefined;
            getData?: (() => any) | undefined;
            preferTag?: string | undefined;
            schemaPath?: string | undefined;
            regionInfo?: import("../plugin").RegionConfig | undefined;
            widthMutable?: boolean | undefined;
            memberIndex?: number | undefined;
        }): any;
        removeChild(child: any): void;
        toggleFold(e: import("react").MouseEvent<HTMLAnchorElement, MouseEvent>): void;
        patch(store: any, force?: boolean): void;
        updateSchema(value: any): void;
        updateSchemaStyle(value: any): void;
        setComponent(value: any): void;
        getComponent(): any;
        calculateHighlightBox(root?: any): void;
        resetHighlightBox(root: any): void;
        updateState(state: any, replace?: boolean): void;
        setWidthMutable(value: any): void;
        setHeightMutable(value: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
        isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        id: import("mobx-state-tree").IType<string | undefined, string, string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
        region: import("mobx-state-tree").IType<string | undefined, string, string>;
        preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
        state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        w: import("mobx-state-tree").IType<number | undefined, number, number>;
        h: import("mobx-state-tree").IType<number | undefined, number, number>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
    }, {
        getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
    } & {
        readonly info: RendererInfo;
        setInfo(value: RendererInfo): void;
        readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
        setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
        readonly isVitualRenderer: boolean;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly moveable: boolean;
        readonly canMoveUp: boolean;
        readonly canMoveDown: boolean;
        readonly removable: boolean;
        readonly duplicatable: boolean;
        readonly replaceable: boolean;
        memberImmutable(region: string): boolean;
        readonly isRegion: boolean;
        readonly childRegions: any[];
        readonly uniqueChildren: any[];
        readonly sameIdChild: any;
        readonly singleRegion: boolean;
        isExists(id: string): boolean;
        getChildById(id: string): any;
        readonly parent: any;
        readonly ancestorField: any;
        readonly host: any;
        readonly firstChild: any;
        readonly index: any;
        readonly prevSibling: any;
        readonly nextSibling: any;
        readonly schema: any;
        readonly schemaParent: any;
        readonly isSecondFactor: boolean;
    } & {
        getClosestParentByType: (type: string) => void | ({
            parentId: string;
            parentRegion: string;
            isCommonConfig: boolean;
            id: string;
            type: string;
            label: string;
            regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
            path: string;
            schemaPath: string;
            region: string;
            preferTag: string;
            state: any;
            widthMutable: boolean;
            heightMutable: boolean;
            memberIndex: number;
            folded: boolean;
            patched: boolean;
            x: number;
            y: number;
            w: number;
            h: number;
            children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
            isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
            region: import("mobx-state-tree").IType<string | undefined, string, string>;
            preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
            state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
            folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            w: import("mobx-state-tree").IType<number | undefined, number, number>;
            h: import("mobx-state-tree").IType<number | undefined, number, number>;
            children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
        }, {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>);
        updateIsCommonConfig: (value: boolean) => void;
        addChild(props: {
            id: string;
            type: string;
            label: string;
            path: string;
            isCommonConfig?: boolean | undefined;
            info?: RendererInfo | undefined;
            region?: string | undefined;
            getData?: (() => any) | undefined;
            preferTag?: string | undefined;
            schemaPath?: string | undefined;
            regionInfo?: import("../plugin").RegionConfig | undefined;
            widthMutable?: boolean | undefined;
            memberIndex?: number | undefined;
        }): any;
        removeChild(child: any): void;
        toggleFold(e: import("react").MouseEvent<HTMLAnchorElement, MouseEvent>): void;
        patch(store: any, force?: boolean): void;
        updateSchema(value: any): void;
        updateSchemaStyle(value: any): void;
        setComponent(value: any): void;
        getComponent(): any;
        calculateHighlightBox(root?: any): void;
        resetHighlightBox(root: any): void;
        updateState(state: any, replace?: boolean): void;
        setWidthMutable(value: any): void;
        setHeightMutable(value: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    getNodePathById(id: string): ({
        parentId: string;
        parentRegion: string;
        isCommonConfig: boolean;
        id: string;
        type: string;
        label: string;
        regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
        path: string;
        schemaPath: string;
        region: string;
        preferTag: string;
        state: any;
        widthMutable: boolean;
        heightMutable: boolean;
        memberIndex: number;
        folded: boolean;
        patched: boolean;
        x: number;
        y: number;
        w: number;
        h: number;
        children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
    } & {
        readonly info: RendererInfo;
        setInfo(value: RendererInfo): void;
        readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
        setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
        readonly isVitualRenderer: boolean;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly moveable: boolean;
        readonly canMoveUp: boolean;
        readonly canMoveDown: boolean;
        readonly removable: boolean;
        readonly duplicatable: boolean;
        readonly replaceable: boolean;
        memberImmutable(region: string): boolean;
        readonly isRegion: boolean;
        readonly childRegions: any[];
        readonly uniqueChildren: any[];
        readonly sameIdChild: any;
        readonly singleRegion: boolean;
        isExists(id: string): boolean;
        getChildById(id: string): any;
        readonly parent: any;
        readonly ancestorField: any;
        readonly host: any;
        readonly firstChild: any;
        readonly index: any;
        readonly prevSibling: any;
        readonly nextSibling: any;
        readonly schema: any;
        readonly schemaParent: any;
        readonly isSecondFactor: boolean;
    } & {
        getClosestParentByType: (type: string) => void | ({
            parentId: string;
            parentRegion: string;
            isCommonConfig: boolean;
            id: string;
            type: string;
            label: string;
            regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
            path: string;
            schemaPath: string;
            region: string;
            preferTag: string;
            state: any;
            widthMutable: boolean;
            heightMutable: boolean;
            memberIndex: number;
            folded: boolean;
            patched: boolean;
            x: number;
            y: number;
            w: number;
            h: number;
            children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
            isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
            region: import("mobx-state-tree").IType<string | undefined, string, string>;
            preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
            state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
            folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            w: import("mobx-state-tree").IType<number | undefined, number, number>;
            h: import("mobx-state-tree").IType<number | undefined, number, number>;
            children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
        }, {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>);
        updateIsCommonConfig: (value: boolean) => void;
        addChild(props: {
            id: string;
            type: string;
            label: string;
            path: string;
            isCommonConfig?: boolean | undefined;
            info?: RendererInfo | undefined;
            region?: string | undefined;
            getData?: (() => any) | undefined;
            preferTag?: string | undefined;
            schemaPath?: string | undefined;
            regionInfo?: import("../plugin").RegionConfig | undefined;
            widthMutable?: boolean | undefined;
            memberIndex?: number | undefined;
        }): any;
        removeChild(child: any): void;
        toggleFold(e: import("react").MouseEvent<HTMLAnchorElement, MouseEvent>): void;
        patch(store: any, force?: boolean): void;
        updateSchema(value: any): void;
        updateSchemaStyle(value: any): void;
        setComponent(value: any): void;
        getComponent(): any;
        calculateHighlightBox(root?: any): void;
        resetHighlightBox(root: any): void;
        updateState(state: any, replace?: boolean): void;
        setWidthMutable(value: any): void;
        setHeightMutable(value: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
        isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        id: import("mobx-state-tree").IType<string | undefined, string, string>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        label: import("mobx-state-tree").IType<string | undefined, string, string>;
        regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
        region: import("mobx-state-tree").IType<string | undefined, string, string>;
        preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
        state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        x: import("mobx-state-tree").IType<number | undefined, number, number>;
        y: import("mobx-state-tree").IType<number | undefined, number, number>;
        w: import("mobx-state-tree").IType<number | undefined, number, number>;
        h: import("mobx-state-tree").IType<number | undefined, number, number>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
    }, {
        getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
    } & {
        readonly info: RendererInfo;
        setInfo(value: RendererInfo): void;
        readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
        setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
        readonly isVitualRenderer: boolean;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly moveable: boolean;
        readonly canMoveUp: boolean;
        readonly canMoveDown: boolean;
        readonly removable: boolean;
        readonly duplicatable: boolean;
        readonly replaceable: boolean;
        memberImmutable(region: string): boolean;
        readonly isRegion: boolean;
        readonly childRegions: any[];
        readonly uniqueChildren: any[];
        readonly sameIdChild: any;
        readonly singleRegion: boolean;
        isExists(id: string): boolean;
        getChildById(id: string): any;
        readonly parent: any;
        readonly ancestorField: any;
        readonly host: any;
        readonly firstChild: any;
        readonly index: any;
        readonly prevSibling: any;
        readonly nextSibling: any;
        readonly schema: any;
        readonly schemaParent: any;
        readonly isSecondFactor: boolean;
    } & {
        getClosestParentByType: (type: string) => void | ({
            parentId: string;
            parentRegion: string;
            isCommonConfig: boolean;
            id: string;
            type: string;
            label: string;
            regionInfo: (import("../plugin").RegionConfig & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>>) | undefined;
            path: string;
            schemaPath: string;
            region: string;
            preferTag: string;
            state: any;
            widthMutable: boolean;
            heightMutable: boolean;
            memberIndex: number;
            folded: boolean;
            patched: boolean;
            x: number;
            y: number;
            w: number;
            h: number;
            children: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            parentRegion: import("mobx-state-tree").IType<string | undefined, string, string>;
            isCommonConfig: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            id: import("mobx-state-tree").IType<string | undefined, string, string>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            label: import("mobx-state-tree").IType<string | undefined, string, string>;
            regionInfo: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<import("../plugin").RegionConfig, import("../plugin").RegionConfig, import("../plugin").RegionConfig>>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            schemaPath: import("mobx-state-tree").IType<string | undefined, string, string>;
            region: import("mobx-state-tree").IType<string | undefined, string, string>;
            preferTag: import("mobx-state-tree").IType<string | undefined, string, string>;
            state: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            widthMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            heightMutable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            memberIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
            folded: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            patched: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            x: import("mobx-state-tree").IType<number | undefined, number, number>;
            y: import("mobx-state-tree").IType<number | undefined, number, number>;
            w: import("mobx-state-tree").IType<number | undefined, number, number>;
            h: import("mobx-state-tree").IType<number | undefined, number, number>;
            children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>, [undefined]>;
        }, {
            getData: import("mobx-state-tree").IType<() => any, () => any, () => any>;
        } & {
            readonly info: RendererInfo;
            setInfo(value: RendererInfo): void;
            readonly rendererConfig: import("packages/amis-core/lib").RendererConfig | undefined;
            setRendererConfig(value: import("packages/amis-core/lib").RendererConfig): void;
            readonly isVitualRenderer: boolean;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly moveable: boolean;
            readonly canMoveUp: boolean;
            readonly canMoveDown: boolean;
            readonly removable: boolean;
            readonly duplicatable: boolean;
            readonly replaceable: boolean;
            memberImmutable(region: string): boolean;
            readonly isRegion: boolean;
            readonly childRegions: any[];
            readonly uniqueChildren: any[];
            readonly sameIdChild: any;
            readonly singleRegion: boolean;
            isExists(id: string): boolean;
            getChildById(id: string): any;
            readonly parent: any;
            readonly ancestorField: any;
            readonly host: any;
            readonly firstChild: any;
            readonly index: any;
            readonly prevSibling: any;
            readonly nextSibling: any;
            readonly schema: any;
            readonly schemaParent: any;
            readonly isSecondFactor: boolean;
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>);
        updateIsCommonConfig: (value: boolean) => void;
        addChild(props: {
            id: string;
            type: string;
            label: string;
            path: string;
            isCommonConfig?: boolean | undefined;
            info?: RendererInfo | undefined;
            region?: string | undefined;
            getData?: (() => any) | undefined;
            preferTag?: string | undefined;
            schemaPath?: string | undefined;
            regionInfo?: import("../plugin").RegionConfig | undefined;
            widthMutable?: boolean | undefined;
            memberIndex?: number | undefined;
        }): any;
        removeChild(child: any): void;
        toggleFold(e: import("react").MouseEvent<HTMLAnchorElement, MouseEvent>): void;
        patch(store: any, force?: boolean): void;
        updateSchema(value: any): void;
        updateSchemaStyle(value: any): void;
        setComponent(value: any): void;
        getComponent(): any;
        calculateHighlightBox(root?: any): void;
        resetHighlightBox(root: any): void;
        updateState(state: any, replace?: boolean): void;
        setWidthMutable(value: any): void;
        setHeightMutable(value: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly dragging: boolean;
    readonly needPatch: boolean;
    readonly schemaRaw: any;
    /** 获取平台预置组件（基础组件）
     * 备注：disabledRendererPlugin 为 true 则不在面板中展示
     */
    readonly subRenderersByOrder: SubRendererInfo[];
    /** 获取自定义组件
     * 备注：disabledRendererPlugin 为 true 则不在面板中展示
     */
    readonly customRenderersByOrder: SubRendererInfo[];
    /** 根据关键字过滤组件 */
    groupedRenderersByKeyword(_subRenderers: Array<SubRendererInfo>, keywords?: string): {
        [propName: string]: SubRendererInfo[];
    };
    /** 根据关键字过滤预置组件
     * 备注：组件搜索中需要
     */
    groupedSubRenderersByKeyword(_subRenderers?: Array<SubRendererInfo>, keywords?: string): {
        [propName: string]: SubRendererInfo[];
    };
    /**
     * 根据当前分类和关键字获取预置组件
     * 备注：组件面板展示需要
     */
    readonly groupedSubRenderers: {
        [propName: string]: SubRendererInfo[];
    };
    /** 根据关键字过滤自定义组件 */
    groupedCustomRenderersByKeyword(_subRenderers?: Array<SubRendererInfo>, keywords?: string): {
        [propName: string]: SubRendererInfo[];
    };
    /**
     * 根据当前分类和关键字获取自定义组件
     */
    readonly groupedCustomRenderers: {
        [propName: string]: SubRendererInfo[];
    };
    getSubRendererById(id: string): any;
    readonly groupedInsertRenderers: {
        [propName: string]: SubRendererInfo[];
    };
    readonly selectedInsertRendererInfo: SubRendererInfo | undefined;
    readonly subEditorSlotPath: string;
    readonly subEditorValue: any;
    readonly canUndo: boolean;
    readonly canRedo: boolean;
    isFlexContainer(id: string): boolean;
    isFlexItem(id: string): boolean;
    isFlexColumnItem(id: string): boolean;
    draggableContainer(id?: string): boolean;
    parentIsFreeContainer(id?: string): any;
    readonly getSuperEditorData: any;
    getComponentTreeSource(): any;
} & {
    setLayer(value: any): void;
    getLayer(): HTMLElement | undefined;
    setDoc(value: any): void;
    getDoc(): Document;
    setIframe(value: any): void;
    getIframe(): HTMLIFrameElement | undefined;
    setIsMobile(value?: boolean): void;
    setCtx(value: any): void;
    setTheme(value: string): void;
    setIsSubEditor(isSubEditor: boolean): void;
    setShowCustomRenderersPanel(_showCustomRenderersPanel: boolean): void;
    setSchema(json: any): void;
    insertSchema(event: PluginEvent<InsertEventContext>): any;
    moveSchema(event: PluginEvent<MoveEventContext>): void;
    setActiveId(id: string, region?: string, selections?: Array<string>): void;
    setSelections(ids: Array<string>): void;
    clearSelection(): void;
    setHoverId(id: string, region?: string): void;
    setMouseMoveRegion(region: string): void;
    setInsertId(id: string): void;
    setContextId(id: string): void;
    setDragId(id: string, mode?: 'move' | 'copy', type?: string, schema?: any): void;
    setDropId(id: string, region?: string): void;
    setPlanDropId(id: string, region: string): void;
    setActiveToolbars(activeToolbars: Array<ToolbarItem>): void;
    setPanels(panels: Array<PanelItem>): void;
    setSubRenderers(renderers: Array<SubRendererInfo>): void;
    changeSubRenderersKeywords(keywords: string): void;
    changeSubRenderersTag(tag: string): void;
    resetSubRenderersKeywords(): void;
    changeCustomRenderersKeywords(keywords: string): void;
    changeCustomRenderersTag(tag: string): void;
    resetCustomRenderersKeywords(): void;
    changeSubRendererRegion(region: string): void;
    changePanelKey(key: string): void;
    changeLeftPanelKey(key: string): void;
    changeRenderersTabsKey(key: string): void;
    changeLeftPanelOpenStatus(isOpenStatus: boolean): void;
    showRendererPanel(tag?: string, msg?: string): void;
    changeValue(value: Schema, diff?: any): void;
    changeValueById(id: string, value: Schema, diff?: any, replace?: boolean, noTrace?: boolean): void;
    /**
     * 更新特殊布局元素的位置（fixed、absolute）
     */
    updateContainerStyleByDrag(dragId: string, dx: number, dy: number): void;
    moveUp(id: string): void;
    moveDown(id: string): void;
    del(id: string): void;
    delMulti(ids: Array<string>): void;
    duplicate(id: string | Array<string>): void;
    emptyRegion(id: string, region: string): void;
    replaceChild(id: string, json: any): void;
    setInsertRegion(region: string, id?: string, tag?: string, mode?: 'insert' | 'replace', originId?: string, beforeId?: string): void;
    closeInsertPanel(): void;
    showInsertRendererPanel(): void;
    closeInsertRendererPanel(): void;
    setInsertRenderers(renderers: Array<SubRendererInfo>): void;
    changeInsertRenderersKeywords(keywords: string): void;
    resetInsertRenderersKeywords(): void;
    setInsertTag(tag: string): void;
    setInsertSelected(id: string): void;
    setJSONSchemaUri(schemaUri: string): void;
    openSubEditor(context: SubEditorContext): void;
    confirmSubEditor([valueRaw]: any): void;
    closeSubEditor(): void;
    subEditorOnChange(): void;
    undoSubEditor(): void;
    redoSubEditor(): void;
    subEditorRef(ref: any): void;
    openScaffoldForm(context: ScaffoldFormContext): void;
    closeScaffoldForm(): void;
    setScaffoldBuzy(value: any): void;
    setScaffoldError(msg?: string): void;
    openPopOverForm(context: PopOverFormContext): void;
    closePopOverForm(): void;
    calculateHighlightBox(ids: Array<string>): void;
    resetHighlightBox(ids: Array<string>): void;
    /**
     * 更新可供 target 及 reload 使用的名称列表
     */
    updateTargetName(): void;
    traceableSetSchema(schema: any, noTrace?: boolean): void;
    undo(): void;
    redo(): void;
    autoSelectRoot(): void;
    resetHistory(): void;
    /**
     * 原来 MiniEditor 里面的逻辑，目前是 pageEditor 中使用了
     */
    applyPatches(patches: Array<PatchItem>): void;
    /** 更改应用多语言的状态 */
    updateAppLocaleState(): void;
    /** 设置应用语言，支持应用国际化 */
    setAppLocale(locale?: string): void;
    /** 设置应用的语料数据 */
    setAppCorpusData(data?: any): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type EditorStoreType = Instance<typeof MainStore>;
